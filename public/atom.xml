<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Vixuowis' Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-01T07:31:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Vixuowis]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[机器学习能力使用手册！]]></title>
    <link href="http://yoursite.com/2015/12/01/151201-machine-learning/"/>
    <id>http://yoursite.com/2015/12/01/151201-machine-learning/</id>
    <published>2015-12-01T02:34:19.000Z</published>
    <updated>2015-12-01T07:31:33.000Z</updated>
    <content type="html"><![CDATA[<h4 id="1分钟理解">1分钟理解</h4><p>如果你不知道机器学习，你肯定知道以下技术：数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人。</p>
<p>这些都是机器学习的应用领域，基本上是一个研究基础算法的学科，这个算法又有学习的能力。一般算法给固定输入，产生固定输出。而机器学习算法通过一定的训练，给定输入可以不断改进输出质量。听上去就比较像人了，事实上也是照着人来设计的，比如神经网络，能做出很神奇的识别效果。</p>
<p>机器学习在计算机里有点像魔术，虽然很神奇，但是并不是真的有智能，或者说，只是这些数据、算法让你感觉有智能，在做模糊判断，实际上内部机制很简单。</p>
<p>换句话来思考下，那如果人也是这样呢，看上去挺智能挺神奇智商挺高，但是内部机制都是神经元传递，他们形成的数据、传输能力、连接方式和在一起便是智能。我们如果有天有人脑规模的计算能力，是否也可以完成一个完整的人工智能？希望吧 😄</p>
<p>在使用这个能力之前，这之前我会告诉你机器学习有两种，一种是有监督学习，一种是无监督学习，区别如下。</p>
<ul>
<li>有监督学习：训练数据有人工标注，产生分类能力。</li>
<li>无监督学习：训练数据无人工标注，产生聚类能力。</li>
</ul>
<p>人的话，也会有两种学习方式，通过有标注的书，了解旧事物的特征，从而判断新事物的类别。通过无标注的环境，自动抽取细节，把相似的东东放在一起，等下次有标注的时候再细化特征。</p>
<h4 id="2分钟设计">2分钟设计</h4><p>你已经知道机器学习基本概念了，来说点更深的，比如做个文本分类，这是有监督学习哦。</p>
<p>你需要准备以下两个东西：</p>
<ul>
<li>训练数据</li>
</ul>
<table>
<thead>
<tr>
<th>编号</th>
<th>内容</th>
<th>标注</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>机器学习真的很好玩！</td>
<td>good</td>
</tr>
<tr>
<td>2</td>
<td>概率论太难玩了！</td>
<td>bad</td>
</tr>
<tr>
<td>3</td>
<td>数学很好玩！</td>
<td>good</td>
</tr>
</tbody>
</table>
<ul>
<li>算法</li>
</ul>
<h5 id="1-_特征抽取">1. 特征抽取</h5><p>利用特征抽取工具，在这个例子里叫tokenizer分词器，抽取为以下特征：</p>
<blockquote>
<p>1号：机器/学习/真的/很/好玩<br>2号：概率论/太/难玩/了<br>3号：数学/很/好玩</p>
</blockquote>
<p>为了简化，我们把每个词编个号<br>w1=机器，w2=学习，w3=真的，w4=很，w5=好玩，w6=概率论，w7=太，w8=难玩，w9=了，w10=数学<br>即：</p>
<blockquote>
<p>1号：w1 / w2 / w3 / w4 / w5<br>2号：w6 / w7 / w8 / w9<br>3号：w10 / w4 / w5</p>
</blockquote>
<h5 id="2-_贝叶斯概率计算">2. 贝叶斯概率计算</h5><p>我们要用的是贝叶斯公式，P(class|w1w2..wn) = P(w1w2..wn|class)P(class)<br>先算P(class)</p>
<blockquote>
<p>P(good)：2/3 = 66.6%<br>P(bad)： 1/3 = 33.3%</p>
</blockquote>
<p>再算P(w1w2..wn|class) = P(w1|class)<em>P(w2|class)…</em>P(wn|class)</p>
<table>
<thead>
<tr>
<th>词语</th>
<th>编号</th>
<th>P(wi/good)</th>
<th>P(wi/bad)</th>
</tr>
</thead>
<tbody>
<tr>
<td>机器</td>
<td>w1</td>
<td>1/8</td>
<td>0</td>
</tr>
<tr>
<td>学习</td>
<td>w2</td>
<td>1/8</td>
<td>0</td>
</tr>
<tr>
<td>真的</td>
<td>w3</td>
<td>1/8</td>
<td>0</td>
</tr>
<tr>
<td>很</td>
<td>w4</td>
<td>1/4</td>
<td>0</td>
</tr>
<tr>
<td>好玩</td>
<td>w5</td>
<td>1/4</td>
<td>0</td>
</tr>
<tr>
<td>概率论</td>
<td>w6</td>
<td>0</td>
<td>1/4</td>
</tr>
<tr>
<td>太</td>
<td>w7</td>
<td>0</td>
<td>1/4</td>
</tr>
<tr>
<td>难玩</td>
<td>w8</td>
<td>0</td>
<td>1/4</td>
</tr>
<tr>
<td>了</td>
<td>w9</td>
<td>0</td>
<td>1/4</td>
</tr>
<tr>
<td>数学</td>
<td>w10</td>
<td>1/8</td>
<td>0</td>
</tr>
</tbody>
</table>
<h5 id="3-_测试">3. 测试</h5><p>然后就可以计算P(class|w1w2..wn)的最大值了<br>我们找个词语表里有特征的句子溜溜这个算法</p>
<blockquote>
<p>4号：概率论真的好玩<br>P(4号|good) = P(概率论/真的/好玩|good) = P(w6w3w5|good) = (3/8)<em>(2/3) = 1/4<br>P(4号|bad) = P(概率论/真的/好玩|bad) = P(w6w3w5|bad) = (1/4) </em> (1/3) = 1/12<br>so: P(4号|good) &gt; P(4号|bad)<br>4号句子是个好句子。 </p>
</blockquote>
<p>以上我们就建立了一个可用的分类器，能够判断好多好多跟机器学习好不好玩的句子的好坏与否，这就是情感分析最核心的部分，之后嘛都是工程和优化问题啦~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="1分钟理解">1分钟理解</h4><p>如果你不知道机器学习，你肯定知道以下技术：数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人。</p>
<p>这些都是机器学习]]>
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="工程师思维" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写个好的垂直爬虫！]]></title>
    <link href="http://yoursite.com/2015/08/26/150826-nextgen-scraper/"/>
    <id>http://yoursite.com/2015/08/26/150826-nextgen-scraper/</id>
    <published>2015-08-26T09:21:19.000Z</published>
    <updated>2015-09-06T17:32:04.000Z</updated>
    <content type="html"><![CDATA[<h4 id="简单来说">简单来说</h4><p>爬虫不是虫子，是用来干你站的，也不全是干你站，只是利用你站里的数据做点有用的事，如果你是新闻或者博客站点，那你遇到好爬虫就幸运了，会增加流量的，某歌和某度就是爬虫之上建立起来的公司，所以他们这方面研究比较透彻，这里随便记录几笔吧，做爬虫的人太多了。</p>
<p>爬虫简单写写就两部分，下载，解析。这是一个爬虫抓取环的最基本要素。你可以把两个步骤串起来，也可以并起来，因为两个步骤不冲突。可是做大了就比较复杂了，俩步骤有好多坑要填，</p>
<ul>
<li>下载要填如下坑：地址嗅探、存储、去重、认证、代理、网络io、并行。</li>
<li>解析要填如下坑：ajax渲染、格式校正、匹配、抽取、存储、并行。</li>
</ul>
<p>而垂直爬虫，通俗一点，就是专干一个站的爬虫，干光为止，这样资源基本没有浪费，且能做相当多的优化工作（注意适可而止）。通用爬虫就是，不光干一个站，能干的站尽量干，通用爬虫需要勇气，也需要通用的排序、索引算法做支撑。</p>
<h4 id="我们的目标是">我们的目标是</h4><h5 id="1-_填坑">1. 填坑</h5><p>据说做爬虫的上辈子都是吃了虫子的贝爷。爬虫有三宝，PhantomJS、proxy、黑客好。</p>
<h5 id="2-_爬全与爬准">2. 爬全与爬准</h5><p>坑填完了就完了么，并没有，拿垂直爬虫来说，通用爬虫也有这个问题，但是不如垂直爬虫敏感，那就是内容缺失。你没获取到内容你不知道是下载的问题还是解析的问题，所以前面每个坑都得做相应的智能检测，每天的目标站总量内容数据增长，都是有稳定的一个量，至少是线性平滑的，对于大站的突增也一般有新闻能提醒你，小站不可能，除非爆站（爆了小站只能根据内容做垃圾分类了，尤其关键词经过SEO的，内容上过滤的话工作就多了）。所以你知道得监控有效爬取量了。</p>
<p>两种目标站，论坛型和搜索型，有时候同时出现，那就比较幸运了。论坛型比较简单，遍历论坛列表，找特定url就行，如果论坛列表多并且你有需求就像男人一样搞通用爬虫吧！搜索型，需要注意的就是时效性，有些内容是你现在不爬，一辈子都爬不到的，除非关键词覆盖到，而有些内容，可能你一辈子抓都是那些，就是因为关键词组合定位不准。所以非技术因素上，关键词挺重要，或许技术上加一层关键词有效爬取量监控会好很多。另外如何提升时效性，就是为url更新做优化，加时效权值，更新速度快的权值大，内容多的权值大，优先爬取还没做的，和时效权值大的。</p>
<h5 id="3-_省资源与大规模">3. 省资源与大规模</h5><p>爬全和爬准要取一个交集，毕竟大规模爬虫的建设，要省。规模化有几个方向：</p>
<ul>
<li>集群化，下载集群，解析集群，存储集群，调度集群</li>
<li>优化下载，proxy分布到离目标站近的线路上</li>
<li>优化解析，从HTML抽取库改为正则</li>
<li>优化调度，内容更新快的多爬快爬，内容更新慢的少爬慢爬</li>
</ul>
<h4 id="相关工作">相关工作</h4><p>搞了10几个站，尽管都是常用技术了，仍然每次做都有新的体会，慢慢梳理。</p>
<p>工程就是艺术。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="简单来说">简单来说</h4><p>爬虫不是虫子，是用来干你站的，也不全是干你站，只是利用你站里的数据做点有用的事，如果你是新闻或者博客站点，那你遇到好爬虫就幸运了，会增加流量的，某歌和某度就是爬虫之上建立起来的公司，所以他们这方面研究比较透彻，这里随便记录几笔吧]]>
    </summary>
    
      <category term="Web开发" scheme="http://yoursite.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="工程师思维" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是自我驱动！]]></title>
    <link href="http://yoursite.com/2015/08/25/150825-self-motivated/"/>
    <id>http://yoursite.com/2015/08/25/150825-self-motivated/</id>
    <published>2015-08-25T15:11:51.000Z</published>
    <updated>2015-09-06T17:23:05.000Z</updated>
    <content type="html"><![CDATA[<p>在市场上看人看出了心得，很多工作都提出了Self-motivated的要求，但并不具体，从这一点进行扩充，博客可以被框架所强力驱动，那么人又是如何自我驱动的呢，<strong>它具体来说是什么</strong>？</p>
<h4 id="那就是">那就是</h4><p>无论需求多么模糊，目标多么不明确，条件多么原始。永远能找到解决方案，永远不会等待，永远能推进事情前进，永远能想到短期目标、长期目标在哪里，永远能按期交付，永远能承担责任。</p>
<h4 id="本质上">本质上</h4><p>自我驱动的人，能够使：</p>
<ul>
<li>想法具象化</li>
<li>问题抽象化</li>
<li>任务碎片化</li>
<li>方案丰富化</li>
<li>流程标准化</li>
<li>结果文字化</li>
<li>工作专业化</li>
</ul>
<h4 id="对立统一">对立统一</h4><p>既要具象化，又要抽象化，会创新，也能迎合得了标准，会工作的人往往能从多个角度看待任务。在做产品的过程中，往往需要两种对立统一的素质，一是能广看全局，简化目标；二能深挖局部，丰富细节。公司的存在是为了弥补个体无法同时拥有两种能力的缺陷，因此无论在哪里都会有技术岗和管理岗，技术人没必要因为受到管理就抱怨管理人员还没我技术好，如何如何，这是很片面的想法。因为有管理人员对你的流程进行改进、对全局进行把控，你才能有明确的工作范畴，才能够在一个点进行突破，才能做出成绩。但管理人一旦长期深入细节，就会变成技术人，使组织无法实现横向扩展。所以不理解技术深浅的管理是悲哀的，不理解管理难度的技术是更没有前途的。</p>
<p><strong>对你的老板/员工好点吧！</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在市场上看人看出了心得，很多工作都提出了Self-motivated的要求，但并不具体，从这一点进行扩充，博客可以被框架所强力驱动，那么人又是如何自我驱动的呢，<strong>它具体来说是什么</strong>？</p>
<h4 id="那就是">那就是</h4><p>无论]]>
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="Blabla" scheme="http://yoursite.com/categories/Blabla/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[本博客由Hexo、NexT.Mist强力驱动！]]></title>
    <link href="http://yoursite.com/2015/08/23/150823-hello-world/"/>
    <id>http://yoursite.com/2015/08/23/150823-hello-world/</id>
    <published>2015-08-23T15:11:51.000Z</published>
    <updated>2015-08-26T09:23:06.000Z</updated>
    <content type="html"><![CDATA[<h4 id="开场白">开场白</h4><p>开始写博客了，该开始的总要开始的。这次的开始大概是因为：</p>
<ul>
<li>明白技术成长需要记录</li>
<li>真的无聊了</li>
</ul>
<h4 id="原则">原则</h4><p>本博客的写作将遵循：</p>
<ul>
<li>KISS原则，Keep It Simple, Stupid!</li>
<li>开心原则，博客的写作影响到了我的心情，将立即停止。</li>
<li>尽力而为原则，考虑到可能存在的读者，会比平时多花一些时间求真相，主要考虑我也会有收获。</li>
<li>免责原则，本文已知识共享CC，但未经同行评阅，请不要太认真，<del>你服务器炸了跟我并没有什么关系（逃</del>。</li>
</ul>
<h4 id="致谢">致谢</h4><p>感谢以下技术，1024：</p>
<ul>
<li>Github</li>
<li><a href="http://www.ucloud.cn/" target="_blank" rel="external">Ucloud</a></li>
<li>Ubuntu</li>
<li>Node.js</li>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT - Hexo Theme</a></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vixuowis/vixuowis-blog.git</span><br><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-cli -<span class="keyword">g</span></span><br><span class="line">cd vixuowis-blog</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">hexo <span class="keyword">server</span></span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="开场白">开场白</h4><p>开始写博客了，该开始的总要开始的。这次的开始大概是因为：</p>
<ul>
<li>明白技术成长需要记录</li>
<li>真的无聊了</li>
</ul>
<h4 id="原则">原则</h4><p>本博客的写作将遵循：</p>
]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Blabla" scheme="http://yoursite.com/categories/Blabla/"/>
    
  </entry>
  
</feed>
